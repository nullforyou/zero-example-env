version: '3'

services:
  # etcd
  etcd:
    image: bitnami/etcd:latest
    environment:
      - TZ=${TZ}
      - ALLOW_NONE_AUTHENTICATION=yes
      - ETCD_ADVERTISE_CLIENT_URLS=http://0.0.0.0:2379
    ports: # 设置端口映射
      - "${ETCD_PORT}:2379"
    volumes:
      - /deploy/etcd/conf.yml:/opt/bitnami/etcd/conf/etcd.yaml
    networks:
      - zero_example_net
    restart: always

  # dtm
  dtm:
    image: yedf/dtm
    environment:
      STORE_DRIVER: ${DTM_STORE_DRIVER}
      STORE_HOST: ${DTM_STORE_HOST}
      STORE_USER: ${DTM_STORE_USER}
      STORE_PASSWORD: '${DTM_STORE_PASSWORD}'
      STORE_PORT: 3306
      MICRO_SERVICE_DRIVER: '${DTM_MICRO_SERVICE_DRIVER}'
      MICRO_SERVICE_TARGET: '${DTM_MICRO_SERVICE_TARGET}'
      MICRO_SERVICE_END_POINT: '${DTM_MICRO_SERVICE_END_POINT}'
    ports:
      - '36789:36789'
      - '36790:36790'
    networks:
      - zero_example_net

  #jaeger链路追踪
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    restart: always
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"
      - "14268:14268"
      - "9411:9411"
    environment:
      - SPAN_STORAGE_TYPE=elasticsearch
      - ES_SERVER_URLS=http://${ES_SERVER_URLS}:${ES_PORT}
      - LOG_LEVEL=debug
    networks:
      - zero_example_net

  #prometheus监控
  prometheus:
    image: prom/prometheus:v2.28.1
    container_name: prometheus
    environment:
      # 时区上海 - Time zone Shanghai (Change if needed)
      TZ: ${TZ}
    volumes:
      - ./deploy/prometheus/server/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./data/prometheus/data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    restart: always
    user: root
    ports:
      - 9090:9090
    networks:
      - zero_example_net

  #查看prometheus监控数据 - Grafana to view Prometheus monitoring data
  grafana:
    image: grafana/grafana:8.0.6
    container_name: grafana
    hostname: grafana
    user: root
    environment:
      # 时区上海 - Time zone Shanghai (Change if needed)
      TZ: ${TZ}
    restart: always
    volumes:
      - ./data/grafana/data:/var/lib/grafana
    ports:
      - "3001:3000"
    networks:
      - zero_example_net

  #  #搜集kafka业务日志、存储prometheus监控数据
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.13.4
    container_name: elasticsearch
    user: root
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - TZ=${TZ}
    volumes:
      - ./data/elasticsearch/data:/usr/share/elasticsearch/data
    restart: always
    ports:
      - ${ES_PORT}:9200
      - 9300:9300
    networks:
      - zero_example_net

  #查看elasticsearch数据 - Kibana to view Elasticsearch data
#  kibana:
#    image: docker.elastic.co/kibana/kibana:7.13.4
#    container_name: kibana
#    environment:
#      - elasticsearch.hosts=http://${ES_SERVER_URLS}:${ES_PORT}
#      - TZ=${TZ}
#    restart: always
#    networks:
#      - zero_example_net
#    ports:
#      - "5601:5601"
#    depends_on:
#      - elasticsearch

  #消费kafka中filebeat收集的数据输出到es
#  go-stash:
#    image: kevinwan/go-stash:1.0 # if you "macOs intel" or "linux amd"
#    #    image: kevinwan/go-stash:1.0-arm64 #  if you "macOs m1" or "linux arm"
#    container_name: go-stash
#    environment:
#      # 时区上海 - Time zone Shanghai (Change if needed)
#      TZ: ${TZ}
#    user: root
#    restart: always
#    volumes:
#      - ./deploy/go-stash/etc:/app/etc
#    networks:
#      - zero_example_net
#    depends_on:
#      - elasticsearch
#      - kafka

  #收集业务数据 - Collect business data
#  filebeat:
#    image: elastic/filebeat:7.13.4
#    container_name: filebeat
#    environment:
#      # 时区上海 - Time zone Shanghai (Change if needed)
#      TZ: ${TZ}
#    user: root
#    restart: always
#    entrypoint: "filebeat -e -strict.perms=false"  #解决配置文件权限问题 - Solving the configuration file permissions
#    volumes:
#      - ./deploy/filebeat/conf/filebeat.yml:/usr/share/filebeat/filebeat.yml
#      # 此处需指定docker的containers目录，取决于你docker的配置 - The containers directory of docker needs to be specified here, depending on your docker configuration
#      # 如snap安装的docker，则为/var/snap/docker/common/var-lib-docker/containers - Example if docker is installed by Snap /var/snap/docker/common/var-lib-docker/containers
#      # - /var/snap/docker/common/var-lib-docker/containers:/var/lib/docker/containers
#      - /var/lib/docker/containers:/var/lib/docker/containers
#    networks:
#      - zero_example_net
#    depends_on:
#      - kafka


  #zookeeper是kafka的依赖 - Zookeeper is the dependencies of Kafka
  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    environment:
      # 时区上海 - Time zone Shanghai (Change if needed)
      TZ: ${TZ}
    restart: always
    ports:
      - 2181:2181
    networks:
      - zero_example_net

  #消息队列 - Message queue
  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    ports:
      - 9092:9092
    environment:
      - KAFKA_ADVERTISED_HOST_NAME=kafka
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=false
      - TZ=${TZ}
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - zero_example_net
    depends_on:
      - zookeeper

  #asynqmon asynq延迟队列、定时队列的webui - Asynqmon asynq delay queue, timing queue's webUI
  asynqmon:
    image: hibiken/asynqmon:latest
    container_name: asynqmon
    ports:
      - 8980:8080
    command:
      - '--redis-addr=${REDIS_ACCESS_ADDR}'
      - '--redis-password=${REDIS_PASSWORD}'
    restart: always
    networks:
      - zero_example_net
    depends_on:
      - redis

#  mysql:
#    image: mysql/mysql-server:8.0.28
#    container_name: mysql
#    environment:
#      # 时区上海 - Time zone Shanghai (Change if needed)
#      TZ: ${TZ}
#      # root 密码 - root password
#      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
#    ports:
#      - 33069:3306
#    volumes:
#      # 数据挂载 - Data mounting
#      - ./data/mysql/data:/var/lib/mysql
#      # 日志
#    command:
#      # 将mysql8.0默认密码策略 修改为 原先 策略 (mysql8.0对其默认策略做了更改 会导致密码无法匹配)
#      # Modify the Mysql 8.0 default password strategy to the original strategy (MySQL8.0 to change its default strategy will cause the password to be unable to match)
#      --default-authentication-plugin=mysql_native_password
#      --character-set-server=utf8mb4
#      --collation-server=utf8mb4_general_ci
#      --explicit_defaults_for_timestamp=true
#      --lower_case_table_names=1
#    privileged: true
#    restart: always
#    networks:
#      - zero_example_net

  #redis容器 - Redis container
  redis:
    image: redis:6.2.5
    container_name: redis
    ports:
      - 36379:6379
    environment:
      # 时区上海 - Time zone Shanghai (Change if needed)
      TZ: ${TZ}
    volumes:
      # 数据文件 - data files
      - ./data/redis/data:/data:rw
    command: "redis-server --requirepass ${REDIS_PASSWORD}  --appendonly yes"
    privileged: true
    restart: always
    networks:
      - zero_example_net


networks:
  zero_example_net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

